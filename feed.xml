<feed xmlns="http://www.w3.org/2005/Atom"> <id>http://yzngo.cc/</id><title>Yzngo</title><subtitle>About Unity3D, Games Engine, and Graphics.</subtitle> <updated>2024-04-11T00:15:30+08:00</updated> <author> <name>Yzngo</name> <uri>http://yzngo.cc/</uri> </author><link rel="self" type="application/atom+xml" href="http://yzngo.cc/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="http://yzngo.cc/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2024 Yzngo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>软件架构</title><link href="http://yzngo.cc/posts/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/" rel="alternate" type="text/html" title="软件架构" /><published>2023-01-05T00:00:00+08:00</published> <updated>2023-01-05T00:00:00+08:00</updated> <id>http://yzngo.cc/posts/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/</id> <content src="http://yzngo.cc/posts/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/" /> <author> <name>Yzngo</name> </author> <summary> 软件架构 项目中的每个子系统都有自己的方向，把子系统的决策方向合起来再加入它们之间的关联调用就构成了一个完整的架构，即每个系统、模块、组件都是软件系统架构中的一部分。 架构图 在架构设计中，为了能够更好的整理，思考，描述，表达我们的想法；为了让自己和大家能够更加系统的认识架构的意图，结构以及各个子系统。 架构图不关心实现的细节，只关心整体的解决方案。架构图要做到从宏观的角度能看明白整个项目的布局，能够让人一目了然。 架构图的分类 UML对象关系图 - 描述数据类之间的关系 部署图 - 描述需要用到的服务器及起到的作用，以及它们之间的相互关系 时序图 - 描述系统程序调用的次序和流程 评估架构的好坏 以下各方面都很重要，木桶效应里最短的那块木板才是产品好坏的关键。 承载力 多个程序员共同工作，彼此工作的模块耦合度是否能够保持原... </summary> </entry> <entry><title>Unity Job System</title><link href="http://yzngo.cc/posts/Unity-Job-System/" rel="alternate" type="text/html" title="Unity Job System" /><published>2022-11-12T00:00:00+08:00</published> <updated>2022-11-12T00:00:00+08:00</updated> <id>http://yzngo.cc/posts/Unity-Job-System/</id> <content src="http://yzngo.cc/posts/Unity-Job-System/" /> <author> <name>Yzngo</name> </author> <summary> 官方文档 blit 和 blittable type 是什么？ blit 是位块传送的意思。内存拷贝操作（memory copy operation）有时候被称作位块传送（block transfer），简称为 bit blit。专用于 block transfer 的硬件被称作位块传送器（blitter）。 能够使用 block transfer 的类型在C#中被称作 blittable，即可位块传送的类型。 Blittable 类型是指在托管代码和本机代码中具有相同位级别表示形式的类型。在托管代码和本机代码间[[Marshal 封送]]时无需进行转换。 由于 blittable 类型性能高，应首选这些类型。 C#中的 bl... </summary> </entry> <entry><title>Unitask</title><link href="http://yzngo.cc/posts/UniTask/" rel="alternate" type="text/html" title="Unitask" /><published>2022-10-25T00:00:00+08:00</published> <updated>2022-10-25T00:00:00+08:00</updated> <id>http://yzngo.cc/posts/UniTask/</id> <content src="http://yzngo.cc/posts/UniTask/" /> <author> <name>Yzngo</name> </author> <summary> UniTask/README_CN.md UniTask v2 — Zero Allocation async/await for Unity, with Asynchronous LINQ UniTask 为Unity提供一个高性能，0 GC 的 async/await 异步方案。 基于值类型的 UniTask&amp;lt;T&amp;gt; 和自定义的 AsyncMethodBuilder 来实现0GC。 使所有 Unity 的 AsyncOperations 和 Coroutines 可等待。 基于 PlayerLoop 的任务( UniTask.Yield, UniTask.Delay, UniTask.DelayFrame, etc..) 可以替换所有协程操作。 对 MonoBehaviour 消息事件和 uGUI 事件进行 可等待/异步枚举 拓展。 ... </summary> </entry> <entry><title>行为树</title><link href="http://yzngo.cc/posts/%E8%A1%8C%E4%B8%BA%E6%A0%91/" rel="alternate" type="text/html" title="行为树" /><published>2022-10-10T00:00:00+08:00</published> <updated>2022-10-10T00:00:00+08:00</updated> <id>http://yzngo.cc/posts/%E8%A1%8C%E4%B8%BA%E6%A0%91/</id> <content src="http://yzngo.cc/posts/%E8%A1%8C%E4%B8%BA%E6%A0%91/" /> <author> <name>Yzngo</name> </author> <summary> 参考资料 Behavior trees for AI: How they work 好用的行为树插件 Behavior Designer NodeCanvas Fluid Behavior Tree - GitHub - 代码驱动行为树 行为树的基本概念 行为树采用策略型思考方式编写。 行为树的本质是树状节点，是一种树形的父子节点之间的逻辑结构，通过扩展节点的功能来实现复杂的行为逻辑。 行为树可以使用节点搭建一个庞大的AI模型。这些节点就像一个个的积木块，用这些节点搭建完整AI的过程就像是搭积木。 行为树中的节点 表现节点 Behavior Node 整颗行为树中，只有条件节点和行为节点能成为叶子节点，只有这两种是项目中要特别定制的节点。 条件节点 Condition Node 条件满足返回true，不满足返回fal... </summary> </entry> <entry><title>Unity Ugui 事件系统分析</title><link href="http://yzngo.cc/posts/Unity-uGUI-%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90/" rel="alternate" type="text/html" title="Unity Ugui 事件系统分析" /><published>2022-08-08T00:00:00+08:00</published> <updated>2022-08-08T00:00:00+08:00</updated> <id>http://yzngo.cc/posts/Unity-uGUI-%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90/</id> <content src="http://yzngo.cc/posts/Unity-uGUI-%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90/" /> <author> <name>Yzngo</name> </author> <summary> Event System Event System 组件本身仅仅作为整个事件系统的管理器，或者不同事件系统组件的辅助器。 如果不需要处理玩家的输入事件，可以把 Event System 删掉。 Event System 并非uGUI专用的，也可以用于其他用途。 工作流程：Unity输入系统检测到用户输入，Input Modules 处理用户输入，从摄像机的屏幕位置上通过 Raycasters 检测用户点击到的对象（通过坐标计算或射线检测），把输入数据存储到 Event Data 中，再通过 Messaging System 通知对象响应事件。 Input Modules - 输入模块 Input Modules 承担了整个事件系统的业务逻辑，是事件系统的核心模块。 默认的 StandaloneInputModule 对接的是 Unity.I... </summary> </entry> </feed>
